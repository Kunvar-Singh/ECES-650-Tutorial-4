# -*- coding: utf-8 -*-
"""ECES-650 Tutorial 4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d5X6UOfZkEqiX-eR6h4MA3nj8g8Tl-Ru
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install dendropy

from dendropy import Tree
from dendropy.calculate.treecompare import unweighted_robinson_foulds_distance

# Load the first tree
t1 = Tree.get(path="RAxML_bipartitions.result", schema="newick")

# Load the second tree using the taxon namespace from the first tree
t2 = Tree.get(path="fastree_result.tree", schema="newick", taxon_namespace=t1.taxon_namespace)

rf = unweighted_robinson_foulds_distance(t1, t2)
n = len([nd.taxon.label for nd in t1.leaf_node_iter()])  # assumes same taxa in both
max_rf = 2*(n-3)
norm = rf / max_rf
similarity = 1 - norm
print(f"Taxa: {n}, RF: {rf}, Max RF: {max_rf}, Normalized RF: {norm:.3f}, Similarity: {similarity:.3f}")

"""The RF distance is a measure of the difference between two phylogenetic trees. It's calculated by counting the number of bipartitions (or splits) that are present in one tree but not the other. A distance of 0 means the trees are identical, and a higher distance means they are more different. In this case, a distance of 21 indicates that there are 21 bipartitions that are present in one of your trees but not the other."""

from PIL import Image, ImageDraw, ImageFont
from IPython.display import display

def open_flatten(path, bg=(255,255,255)):
    im = Image.open(path)
    if im.mode in ("RGBA", "LA"):
        bg_im = Image.new("RGB", im.size, bg)
        bg_im.paste(im, mask=im.split()[-1])  # alpha as mask
        return bg_im
    return im.convert("RGB")

left_path  = "RAxML_Visualization.png"
right_path = "Fasttree_Visualization.png"

L = open_flatten(left_path)
R = open_flatten(right_path)

# match heights
h = min(L.height, R.height)
L = L.resize((int(L.width * h / L.height), h), Image.LANCZOS)
R = R.resize((int(R.width * h / R.height), h), Image.LANCZOS)

# padding & labels
pad = 80  # Increased padding
label_pad = 60
W = L.width + R.width + pad*3
H = h + label_pad + pad*2

canvas = Image.new("RGB", (W, H), (255,255,255))
# labels and drawing
draw = ImageDraw.Draw(canvas)
# Try to load a decent font; fallback to default if not found
try:
    font = ImageFont.truetype("arial.ttf", 36)
except:
    font = ImageFont.load_default()

# paste images
canvas.paste(L, (pad, label_pad + pad))
canvas.paste(R, (pad*2 + L.width, label_pad + pad))

# draw labels
draw.text((pad, pad), "(A) RAxML (GTR+Γ)", fill=(0,0,0), font=font)
draw.text((pad*2 + L.width, pad), "(B) FastTree (GTR+Γ)", fill=(0,0,0), font=font)

# Draw dividing line
line_x = pad + L.width + pad/2
draw.line([(line_x, label_pad + pad), (line_x, label_pad + pad + h)], fill=(0,0,0), width=3)


# save at 300 dpi
canvas.save("Comparison_Hinf16S.png", dpi=(300,300))

# Display the generated image
display(Image.open("Comparison_Hinf16S.png"))